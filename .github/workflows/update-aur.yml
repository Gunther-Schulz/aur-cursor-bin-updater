name: Update AUR Package

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set DEBUG environment variable
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "DEBUG=true" >> $GITHUB_ENV
          else
            echo "DEBUG=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          echo "::group::Installing Python dependencies"
          python -m pip install --upgrade pip
          pip install requests packaging
          echo "::endgroup::"

      - name: Check for updates
        id: check
        run: |
          echo "::group::Checking for updates"
          python check.py
          echo "check_output=$(cat check_output.json | jq -c .)" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Debug Output
        run: |
          echo "Check output: ${{ steps.check.outputs.check_output }}"
          echo "DEBUG: $DEBUG"

      - name: Update PKGBUILD
        if: fromJson(steps.check.outputs.check_output).update_needed
        env:
          DEBUG: ${{ env.DEBUG }}
        run: |
          echo "::group::Updating PKGBUILD"
          python update_pkgbuild.py check_output.json
          echo "::endgroup::"
          echo "Final PKGBUILD content:"
          cat PKGBUILD

      - name: Commit changes
        if: fromJson(steps.check.outputs.check_output).update_needed
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add PKGBUILD
          git commit -m "Update PKGBUILD to version ${{ fromJson(steps.check.outputs.check_output).latest_version }}"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: fromJson(steps.check.outputs.check_output).update_needed
        id: create_release
        continue-on-error: true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ fromJson(steps.check.outputs.check_output).latest_version }}
          release_name: Release ${{ fromJson(steps.check.outputs.check_output).latest_version }}
          draft: false
          prerelease: false

      - name: Check Release Creation
        if: steps.create_release.outcome == 'failure'
        run: |
          echo "Release already exists or creation failed. Skipping asset upload."
          echo "release_created=false" >> $GITHUB_OUTPUT
        id: check_release

      - name: Upload Release Asset
        if: fromJson(steps.check.outputs.check_output).update_needed && steps.check_release.outputs.release_created != 'false'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cursor-${{ fromJson(steps.check.outputs.check_output).latest_version }}.AppImage
          asset_name: cursor-${{ fromJson(steps.check.outputs.check_output).latest_version }}.AppImage
          asset_content_type: application/octet-stream

      - name: Print Artifact Link
        if: fromJson(steps.check.outputs.check_output).update_needed
        run: |
          echo "Artifact uploaded successfully!"
          echo "Download URL: ${{ steps.upload-release-asset.outputs.browser_download_url }}"

      - name: Check if development branch
        if: fromJson(steps.check.outputs.check_output).update_needed
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "On development branch, stopping workflow"
            exit 0
          fi

      - name: Install SSH Key
        if: steps.check.outputs.update_needed == 'true' && github.ref != 'refs/heads/development'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Publish AUR package
        if: steps.check.outputs.update_needed == 'true' && github.ref != 'refs/heads/development'
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.2
        with:
          pkgname: cursor-bin
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ steps.check.outputs.latest_version }}"
          allow_empty_commits: false
          ssh_keyscan_types: rsa,ecdsa,ed25519

      - name: Summary
        if: github.ref != 'refs/heads/development'
        run: |
          echo "::group::Workflow Summary"
          echo "Update needed: ${{ steps.check.outputs.update_needed }}"
          echo "Latest version: ${{ steps.check.outputs.latest_version }}"
          if [ "${{ steps.check.outputs.update_needed }}" == "true" ]; then
            echo "PKGBUILD updated and published to AUR"
          else
            echo "No update was necessary"
          fi
          echo "::endgroup::"